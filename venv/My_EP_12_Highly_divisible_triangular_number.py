''' Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers: 
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
'''
# a faster algorithm

import numpy as np

longitud = 0
count = 0
i = 1

while count <= 500:
    longitud += 1
    triangular = int((longitud * (longitud + 1)) / 2)
    sqrttriangular = np.math.sqrt(triangular) + 1  # La raiz cuadrada +1
    count += 1
    while i < sqrttriangular:  # Asi el bucle es lo mas corto posible
        i += 1
        if triangular % i == 0:
            count += 2  # A単ade el dividendo y el cociente
    count += 1  # A単ade el propio numero
    print(longitud, " Triangular: ", triangular, "Len: ", count)
    if count < 500:
        count = 0
        i = 1

print("De longitud", longitud, "su triangular es: ", int((longitud * (longitud + 1)) / 2), "Multiplos: ", count)

# n = 7
# triangle_number = 28
# for longitud in range (1,501):
# count = 0
# i = 1
# while count <= 500:
#     n = n + 1 # 8
#     triangle_number += n # 36
#     count += 1 # 1
#     while i < triangle_number / i - 1: # 1 < 36 / 1 - 1 (35)
#         i += 1 # 2
#         if triangle_number % i == 0:
#             count += 2  # A単ade el dividendo y el cociente = 3
#     count += 1  # A単ade el propio numero 4
#     print(n, " Triangular: ", triangle_number, "Len: ", count)
#     if count < 500:
#         count = 0
#         i = 1

# print("De longitud", n, "su triangular es: ", triangle_number, "Multiplos: ", count)

